----item----
version: 1
id: {44178C08-FBA0-44F5-BAC8-B73506693F4E}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Task Management/Functions/Edit-TaskSchedule
parent: {33DD6099-7AA8-48B2-9183-C5A54D3A4F8C}
name: Edit-TaskSchedule
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 4292

function Parse-TaskSchedule{
        [CmdletBinding()]
    param(
        [ValidateNotNullOrEmpty()]
        [Sitecore.Data.Items.Item]$scheduleItem,
        
        [ValidateNotNullOrEmpty()]
        [string]$column
    )
    $ScSchedule = $scheduleItem.Schedule.Split('|'); 
    switch($column){
      from { [Sitecore.DateUtil]::IsoDateToDateTime($ScSchedule[0]); break;}
      to {
              $fieldValue = $ScSchedule[1];
              if([string]::IsNullOrEmpty($fieldValue)){
                  [DateTime]::MaxValue;
              }
              else{
                  [Sitecore.DateUtil]::IsoDateToDateTime($fieldValue);
              } 
              break;
          }
      weekdays {   
        $weekDays = @(1,2,4,8,16,32,64);
        [int]$scDays = $ScSchedule[2]
        $weekDays | Where-Object { $_ -band $scDays }
        break;
      }
      strWeekdays {
        $weekDays = @{1 = "Sunday" ; 2 = "Monday" ; 4 = "Tuesday" ; 8 = "Wednesday" ; 16 = "Thursday" ; 32 = "Friday" ; 64 = "Saturday" }
        [int]$days = $ScSchedule[2]
        $weekDays.Keys | Sort-Object | where { $_ -band $days } | foreach { $daysStr += "$($weekDays.Get_Item($_)), " }
        if($daysStr -ne $null){
          $daysStr = $daysStr.Trim(',', ' ');
        }
        $daysStr
        break;
      }
      interval {   if($ScSchedule[3] -eq $null) {
                ""
            }else{
                $ScSchedule[3]
            }
            break;
        }
    }
}

function Format-TaskSchedule{
        [CmdletBinding()]
    param(
        [ValidateNotNullOrEmpty()]
        [DateTime]$from,
        [ValidateNotNullOrEmpty()]
        [DateTime]$to,
        [ValidateNotNull()]
        $days,
        [ValidateNotNullOrEmpty()]
        [string]$interval
    )
    
    if (($from -eq [DateTime]0) -or ($from -eq [DateTime]::MaxValue) -or ($from -eq [DateTime]::MinValue)){
        $fromStr = ""
    } else {
        $fromStr = $([Sitecore.DateUtil]::ToIsoDate($from))
    }
    
    if (($from -eq [DateTime]0) -or ($from -eq [DateTime]::MaxValue) -or ($from -eq [DateTime]::MinValue)){
        $toStr = ""
    } else {
        $toStr = $([Sitecore.DateUtil]::ToIsoDate($to))
    }
    [int]$scDays = ($days | Measure-Object -Sum).Sum;
    return "$fromStr|$toStr|$scDays|$interval"
}

function Edit-TaskSchedule{
        [CmdletBinding()]
        
    param(
        [ValidateNotNullOrEmpty()]
        [Sitecore.Data.Items.Item]$scheduleItem
    )

    $weekDayOptions = New-Object System.Collections.Specialized.OrderedDictionary
    $weekDayOptions.Add("Sunday", 1)
    $weekDayOptions.Add("Monday", 2)
    $weekDayOptions.Add("Tuesday", 4)
    $weekDayOptions.Add("Wednesday", 8)
    $weekDayOptions.Add("Thursday", 16)
    $weekDayOptions.Add("Friday", 32)
    $weekDayOptions.Add("Saturday", 64)

    $from = Parse-TaskSchedule $schedule "from"
    $to =  Parse-TaskSchedule $schedule "to"
    $weekdays =  Parse-TaskSchedule $schedule "weekdays"
    $interval = Parse-TaskSchedule $schedule "interval"

    $result = Read-Variable -Parameters `
        @{ Name = "from"; Title="Starts running at"; Editor="date time"; Tip="Select the date the task should start to be launched for the first time."}, 
        @{ Name = "to"; Title="Stops running at"; Editor="date time"; Tip="Select the date the task should end being run."}, 
        @{ Name = "weekdays"; Title="Days to run"; Options=$weekDayOptions; Editor="checklist"; Tip="Select the days of the week the task should run."},
        @{ Name = "interval"; Title="Interval <span style='font-family: courier new,monospace;'>(Days.Hours:Minutes:Seconds.Miliseconds)</span>"; Tip="Specify how often the task should be launched"} `
        -Description "Specify schedule for task '$($scheduleItem.DisplayName)'. You can edit the date/time task becomes active and when it should stop running, what days it will run on and how often." `
        -Title "Schedule for task: $($scheduleItem.DisplayName)" -Width 500 -Height 570 -OkButtonName "Change" -CancelButtonName "Cancel" -ShowHints 

    if($result -eq "ok")
    {
        $schedule.Schedule = Format-TaskSchedule $from $to $weekdays $interval
    }
}
#Format-TaskSchedule ([System.DateTime]::Now) ([System.DateTime]::Now) $true $true $true $true $true $true $false "1.0:0:1.0"
----version----
language: en
version: 1
revision: 889003e8-6632-41ec-8b1d-38543cfb8957

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20140520T000534
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

889003e8-6632-41ec-8b1d-38543cfb8957
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 35

20141227T175206:635552995263406953Z
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
