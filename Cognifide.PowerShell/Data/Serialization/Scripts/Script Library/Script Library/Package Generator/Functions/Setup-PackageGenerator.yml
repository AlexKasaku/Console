---
ID: "5db6132a-4d65-41a6-ac92-699dc9bd2903"
Parent: "3b2143e2-2dcf-46b4-a883-06dc33777e99"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/Package Generator/Functions/Setup-PackageGenerator"
DB: master
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    Import-Function Resolve-Error
    $Error.Clear()
    
    $package = New-Package -Name "Content Package";
    $package.Sources.Clear();
    
    $package.Metadata.Author = "$me";
    $package.Metadata.Publisher = "";
    $package.Metadata.Version = "";
    $package.Metadata.Readme = "";
    
    $packageName = $null
    
    $itemsAddedToPackage = New-Object System.Collections.ArrayList
    $itemsProcessedWithLinks = New-Object System.Collections.ArrayList
    $itemsProcessed = New-Object System.Collections.ArrayList
    
    #$itemsAddedToPackage | Get-Item
    #$itemsProcessedWithLinks | Get-Item
    #$itemsProcessed | Get-Item
    
    $defaultProps = @{
        "Title" = "Installation options"
        "Icon" = "Apps/32x32/Installpackage.png"
        "ShowHints" = $true
    }
    
    Add-Type -TypeDefinition @"
        [System.Flags]
        public enum LinkedItemOptions
        {
            None = 0,
            Media = 1,
            Templates = 2,
            Workflows = 4
        }
    "@
    
    $linkedItemOptions = [ordered]@{
        "Include Media" = 1
        "Include Templates" = 2
        "Include Workflows" = 4
    }
    
    $linkedItemOptionTooltips = [ordered]@{
        "1" = "Include all associated content found in the media library."
        "2" = "Include all associated custom templates."
        "4" = "Include all associated workflows."
    }
    
    $rootOptions = [ordered]@{
        "Root and descendants" = "RootAndDescendants"
        "Root and children" = "RootAndChildren"
        "Descendants only" = "DescendantsOnly"
        "Children only" = "ChildrenOnly"
    }
    
    $rootOptionTooltips = [ordered]@{
        "RootAndDescendants" = "The selected item and everything beneath it will be added."
        "RootAndChildren" = "The selected item and immediate children will be added."
        "DescendantsOnly" = "Everything beneath the selected item will be added."
        "ChildrenOnly" = "Immediate children beneath the selected item will be added."
    }
    
    $installOptions = [ordered]@{
        "Overwrite" = "Overwrite"
        "Merge - Merge" = "Merge-Merge"
        "Merge - Clear" = "Merge-Clear"
        "Merge - Append" = "Merge-Append"
        "Skip" = "Skip"
        "Side By Side" = "SideBySide"
        "Ask User" = "AskUser"
    }
    
    $installOptionsTooltips = [ordered]@{
        "Overwrite" = "Item and descendants with a matching ID will be removed and replaced by items from the package."
        "Merge-Merge" = "Items with a matching ID and version number will be overwritten, otherwise the specific version will be added."
        "Merge-Clear" = "Items with a matching ID will have all versions removed for a language and versions from the package will be added."
        "Merge-Append" = "Items with a matching ID from the package will have versions incrementally added 'on-top' of the existing versions."
        "Skip" = "Items with a matching ID will remain unchanged; the items from the package will be skipped."
        "Askuser" = "Prompts the user to make a decision."
    }
    
    function AddItems {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items
        )
        
        if($item -and !$itemsAddedToPackage.Contains($item.ID)) {
            Write-Host "[A] $($item.ProviderPath)" -ForegroundColor Green
            $itemsAddedToPackage.Add($item.ID) | Out-Null
            $items.Entries.Add((New-Object Sitecore.Install.Items.ItemReference $item.Uri, $false).ToString())
        }
    }
    
    function ProcessItemWithLinks {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items,
            [LinkedItemOptions]$LinkedOptions
        )
        
        AddItems -Item $item -Items $items
        Write-Host "Processing links for $($item.ProviderPath)"
        $links = $item.Links.GetAllLinks($true)
        foreach($link in $links) {
            $linkItem = $link.GetTargetItem()
            if($linkItem) {
                ProcessItem -Item $linkItem -Items $items -LinkedOptions $LinkedOptions -SkipLinks
            }
        }
    }
    
    function IsSystemTemplateItem {
        param(
            [item]$Item
        )
        
        $item.Paths.FullPath.StartsWith("/sitecore/templates/System", [System.StringComparison]::OrdinalIgnoreCase) -or
        $item.Paths.FullPath.StartsWith("/sitecore/templates/branches/System", [System.StringComparison]::OrdinalIgnoreCase) -or
        $item.Paths.FullPath.StartsWith("/sitecore/templates/common", [System.StringComparison]::OrdinalIgnoreCase) -or
        $item.Paths.FullPath.StartsWith("/sitecore/templates/sample", [System.StringComparison]::OrdinalIgnoreCase)
    }
    
    function ProcessFieldTemplateItem {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items
        )
        
        $children = $item.GetChildren()
        if($children) {
            foreach($child in $children) {
                AddItems -Item $child -Items $items
                ProcessFieldTemplateItem -Item $child -Items $items
            }
        }
    }
    
    function ProcessTemplateItem {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items,
            [LinkedItemOptions]$LinkedOptions
        )
        
        $templateItem = New-Object Sitecore.Data.Items.TemplateItem $item
        $isSystemItem = IsSystemTemplateItem -Item $item
        
        if(!$isSystemItem) {
            Write-Host "Processing template $($item.ProviderPath)"
            AddItems -Item $item -Items $items
            ProcessFieldTemplateItem -Item $item -Items $items
            $standardValues = $templateItem.StandardValues
            if($standardValues) {
                ProcessItem -Item $standardValues -Items $items -LinkedOptions $LinkedOptions
            }
        }
        
        foreach($baseTemplate in $templateItem.BaseTemplates) {
            $isSystemTemplateBaseItem = IsSystemTemplateItem -Item $baseTemplate
            if(!$isSystemTemplateBaseItem) {
                Write-Host "Processing base template $($baseTemplate.ProviderPath)"
                ProcessItem -Item $baseTemplate -Items $items -LinkedOptions $LinkedOptions -SkipLinks
            }
        }
    }
    
    function ProcessItem {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items,
            [LinkedItemOptions]$LinkedOptions,
            [switch]$SkipLinks
        )
        
        if(!$item) { return }
        
        if(!$SkipLinks -and $LinkedOptions) {
            if(!$itemsProcessedWithLinks.Contains($item.ID)) {
                $itemsProcessedWithLinks.Add($item.ID) | Out-Null
                ProcessItemWithLinks -Item $item -Items $items -LinkedOptions $LinkedOptions
            } else {
                Write-Host "[S] $($item.ProviderPath)" -ForegroundColor Yellow
            }
        } else {
            if(!$itemsProcessed.Contains($item.ID)) {
                $itemsProcessed.Add($item.ID) | Out-Null
                
                if($item.TemplateID -eq [Sitecore.TemplateIDs]::Template -and $LinkedOptions.HasFlag([LinkedItemOptions]::Templates)) {
                    ProcessTemplateItem -Item $item -Items $items -LinkedOptions $LinkedOptions
                } elseif ($item.Paths.FullPath.ToLower().Contains("/sitecore/media library/") -and $LinkedOptions.HasFlag([LinkedItemOptions]::Media)) {
                    Write-Host "Processing media $($item.ProviderPath)"
                    AddItems -Item $item -Items $items
                } elseif ($item.Paths.FullPath.ToLower().Contains("/sitecore/system/workflows/") -and $LinkedOptions.HasFlag([LinkedItemOptions]::Workflows)) {
                    Write-Host "Processing workflow $($item.ProviderPath)"
                    AddItems -Item $item -Items $items
                } elseif ($item.Paths.FullPath.ToLower().Contains("/sitecore/content/")) {
                    Write-Host "Processing item for $($item.ProviderPath)"
                    AddItems -Item $item -Items $items
                }
            }
        }
    }
    
    function ProcessItemWithDescendants {
        param(
            [item]$Item,
            [Sitecore.Install.Items.ExplicitItemSource]$Items,
            [LinkedItemOptions]$LinkedOptions
        )
    
        Write-Host "Processing item $($item.ProviderPath)"
        ProcessItem -Item $Item -Items $Items -LinkedOptions $LinkedOptions    
        
        foreach($child in $item.Children) {
            ProcessItemWithDescendants -Item $child -Items $Items -LinkedOptions $LinkedOptions
        }
    }
    
    function Add-ItemToPackage {
        param (
            $Package, 
            [item]$Item,
            [LinkedItemOptions]$LinkedOptions,
            [bool]$IncludeDescendants
        )
        
        $path = $Item.ProviderPath
        $source = $null
        $sourceDescendants = $null
        
        if ($IncludeDescendants) {
            $source = New-ItemSource -Item $Item -Name "$path" -InstallMode $InstallMode -MergeMode $MergeMode
            
            if($LinkedOptions) {
                $sourceDescendants = New-ExplicitItemSource -Item $Item -Name "$path children" -InstallMode $InstallMode -MergeMode $MergeMode
                ProcessItemWithDescendants -Item $Item -Items $sourceDescendants -LinkedOptions $LinkedOptions
            }
        } else {
            $source = New-ExplicitItemSource -Item $Item -Name "$path" -InstallMode $InstallMode -MergeMode $MergeMode
            
            if($LinkedOptions) {
                Write-Host "Processing item $($item.ProviderPath)"
                ProcessItem -Item $Item -Items $source -LinkedOptions $LinkedOptions
            }
        }
        
        if($source) {
            $package.Sources.Add($source)
            
            if($sourceDescendants) {
                $package.Sources.Add($sourceDescendants)
            }
        }
        
        return $package
    }
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170805T032545Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
