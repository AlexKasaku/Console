----item----
version: 1
id: {F8A608AA-DA64-45C4-A76E-BEF0272D31D5}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Platform/Functions/Remoting2
parent: {E22D066A-04D0-4799-9DAD-EDD9EB07C2B2}
name: Remoting2
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 18002

<#
    .SYNOPSIS
        Sitecore PowerShell Extensions Remoting v2. 
        The contents of this script are the same scripts found in the SPE Remoting package for use outside of Sitecore.
        
    .DESCRIPTION
        The second version of the SPE remoting. This version uses a session object with a cached version of the web service proxy.
        The session object is also Windows security aware. Each function below contains help documentation.
#>

function New-ScriptSession {
    <#
        .SYNOPSIS
            Creates a new script session in Sitecore PowerShell Extensions via web service calls.
    
        .EXAMPLE
            The following remotely connects to an instance of Sitecore initializes a session.
            
            New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
    
            Username      : admin
            Password      : b
            ConnectionUri : http://concentrasitecore/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx
            SessionId     : 528b9865-a69e-4875-919f-12209646c934
            Credential    : 
            Proxy         : Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy1Services_RemoteAutomation_asmx.RemoteAutomation
    #>
    param(
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string]$Username = $null,

        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string]$Password = $null,

        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string[]]$ConnectionUri = $null,

        [Parameter(Mandatory = $false)]
        [System.Management.Automation.PSCredential]
        $Credential
    )

    process {

        foreach($uri in $ConnectionUri) {

            $script = {
                [Cognifide.PowerShell.Core.Host.ScriptSessionManager]::NewSession([Cognifide.PowerShell.Core.Settings.ApplicationNames]::RemoteAutomation, $false);
            }
            
            if(!$uri.EndsWith(".asmx")) {
                $uri = "$($uri.TrimEnd('/'))/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx"
            }

            $proxyProps = @{
                Uri = $uri
            }

            if($Credential) {
                $proxyProps["Credential"] = $Credential
            }

            $proxy = New-WebServiceProxy @proxyProps
            if($Credential) {
                $proxy.Credentials = $Credential
            }
            if(-not $proxy) { return $null }

            $response = $proxy.ExecuteScriptBlock2($Username, $Password, $script.ToString(), $null, $SessionId)
            $session = ConvertFrom-CliXml -InputObject $response
    
            $sessionId = [guid]::Empty

            if([guid]::TryParse($session.ID, [ref] $sessionId)) {
                [PSCustomObject]@{
                    "Username" = [string]$Username
                    "Password" = [string]$Password
                    "ConnectionUri" = [string]$uri
                    "SessionId" = [string]$SessionId
                    "Credential" = [System.Management.Automation.PSCredential]$Credential
                    "Proxy" = [PSObject]$proxy
                }
            } else {
                Write-Error -Message "There was a problem creating a new script session."
            }
        }
    }
}

function Invoke-RemoteScript {
    <#
        .SYNOPSIS
            Run scripts in Sitecore PowerShell Extensions via web service calls.
    
        .EXAMPLE
            The following example remotely executes a script in Sitecore using a reusable session.
    
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Invoke-RemoteScript -Session $session -ScriptBlock { Get-User -id admin }
    
            Name                     Domain       IsAdministrator IsAuthenticated
            ----                     ------       --------------- ---------------
            sitecore\admin           sitecore     True            False
    
        .EXAMPLE
            The following remotely executes a script in Sitecore with arguments.
            
            $script = {
                [Sitecore.Security.Accounts.User]$user = Get-User -Identity admin
                $user
                $params.date.ToString()
            }
    
            $args = @{
                "date" = [datetime]::Now
            }
    
            Invoke-RemoteScript -ConnectionUri "http://remotesitecore" -Username "admin" -Password "b" -ScriptBlock $script -ArgumentList $args
    
            Name                     Domain       IsAdministrator IsAuthenticated
            ----                     ------       --------------- ---------------
            sitecore\admin           sitecore     True            False          
            6/25/2015 11:09:17 AM
    #>
    [CmdletBinding()]
    param(
        
        [Parameter(ParameterSetName='InProcess')]
        [Parameter(ParameterSetName='Session')]
        [Parameter(ParameterSetName='Uri')]
        [scriptblock]$ScriptBlock,

        [Parameter(ParameterSetName='Session')]
        [ValidateNotNull()]
        [pscustomobject]$Session,

        [Parameter(ParameterSetName='Uri')]
        [string]$ConnectionUri,

        [Parameter(ParameterSetName='Uri')]
        [string]$SessionId,

        [Parameter(ParameterSetName='Uri')]
        [string]$Username,

        [Parameter(ParameterSetName='Uri')]
        [string]$Password,

        [Parameter(ParameterSetName='Uri')]
        [System.Management.Automation.PSCredential]
        $Credential,

        [hashtable]$ArgumentList
    )

    if($PSCmdlet.ParameterSetName -eq "InProcess") {
        $ScriptBlock.Invoke()
    } else {
        if($PSCmdlet.ParameterSetName -eq "Session") {
            $ConnectionUri = $Session.ConnectionUri
            $Username = $Session.Username
            $Password = $Session.Password
            $SessionId = $Session.SessionId
            $Credential = $Session.Credential
            $Proxy = $Session.Proxy
        }
        
        if(!$ConnectionUri.EndsWith(".asmx")) {
            $ConnectionUri = "$($ConnectionUri.TrimEnd('/'))/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx"
        }

        if(!$Proxy) {
            $proxyProps = @{
                Uri = $ConnectionUri
            }

            if($Credential) {
                $proxyProps["Credential"] = $Credential
            }

            $proxy = New-WebServiceProxy @proxyProps
            if($Credential) {
                $proxy.Credentials = $Credential
            }
        }
        if(-not $proxy) { return $null }

        if($ArgumentList) {
            $parameters = ConvertTo-CliXml -InputObject $ArgumentList
        }
        $response = $proxy.ExecuteScriptBlock2($Username, $Password, $ScriptBlock.ToString(), $parameters, $SessionId)
        ConvertFrom-CliXml -InputObject $response
    }
}

function Send-MediaItem {
    <#
        .SYNOPSIS
            Uploads an item to the media library in Sitecore PowerShell Extensions via web service calls.
    
       .EXAMPLE
            The following uploads all of the images in a directory to the specified path in the media library in the master db.
            
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Get-ChildItem -Path C:\Images | Send-MediaItem -Session $session -Destination "/sitecore/media library/Images/"
    
        .EXAMPLE
            The following uploads a single image with a new name to the specified path in the media library in the master db.
    
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Send-MediaItem -Session $session -Path C:\Images\banner.jpg -Destination "/sitecore/media library/Images/banner.jpg"
    #>
    [CmdletBinding()]
    param(
        [Parameter(ParameterSetName='Session')]
        [ValidateNotNull()]
        [pscustomobject]$Session,

        [Parameter(ParameterSetName='Uri')]
        [string]$ConnectionUri,

        [Parameter(ParameterSetName='Uri')]
        [string]$SessionId,

        [Parameter(ParameterSetName='Uri')]
        [string]$Username,

        [Parameter(ParameterSetName='Uri')]
        [string]$Password,

        [Parameter(ParameterSetName='Uri')]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
        [Alias("FullName")]
        [ValidateNotNullOrEmpty()]
        [string]$Path,
        
        [Parameter(Position=1, Mandatory=$true)]
        [Alias("RemotePath")]
		[ValidateNotNullOrEmpty()]
        [String]$Destination,

        [Parameter(Position=2)]
        [String]$Database = "master",

        [Parameter(Position=3)]
        [String]$Language = "en"
    )

    process {

        foreach($s in $Session) {

            if($PSCmdlet.ParameterSetName -eq "Session") {
                $ConnectionUri = $s.ConnectionUri
                $Username = $s.Username
                $Password = $s.Password
                $SessionId = $s.SessionId
                $Proxy = $s.Proxy
            }

            Write-Verbose -Message "Connecting to web service."
            
            if(!$ConnectionUri.EndsWith(".asmx")) {
                $ConnectionUri = "$($ConnectionUri.TrimEnd('/'))/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx"
            }

            if(!$Proxy) {
                $proxyProps = @{
                    Uri = $ConnectionUri
                }

                if($Credential) {
                    $proxyProps["Credential"] = $Credential
                }

                $proxy = New-WebServiceProxy @proxyProps
                if($Credential) {
                    $proxy.Credentials = $Credential
                }
            }
            if(-not $proxy) { return $null }

            $output = $Destination
            $extension = [System.IO.Path]::GetExtension($Path)
            if(!$output.EndsWith($extension)) {
                if(!$output.EndsWith("/") -and !$output.EndsWith("\")) {
                    $output += "/"
                }

                $output += [System.IO.Path]::GetFileName($Path)
            }
	
            Write-Verbose -Message "Reading file content."
            [byte[]]$bytes = [System.IO.File]::ReadAllBytes($Path)

            if($bytes -and $bytes.Length -gt 0) {

                Write-Verbose -Message "Uploading file content."
                $proxy.UploadFile($Username, $Password, $output, $bytes, $Database, $Language) | Out-Null

                Write-Verbose -Message "Upload complete."
            } else {
                Write-Verbose -Message "Upload failed. No content to send to the web service."
            }
        }
    }
}

function Receive-MediaItem {
    <#
        .SYNOPSIS
            Downloads an item from the media library in Sitecore PowerShell Extensions via web service calls.
    
       .EXAMPLE
            The following downloads an item from the media library in the master db and dynamically detects the file extension.
            Existing files will be deleted automatically.
    
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Receive-MediaItem -Session $session -Path "/sitecore/media library/Images/Icons/accuracy" -Destination C:\Images\ -Force
    
       .EXAMPLE
            The following downloads an item from the media library in the master db and uses the specified name.
    
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Receive-MediaItem -Session $session -Path "/sitecore/media library/Images/Icons/accuracy" -Destination C:\Images\accuracy2.jpg -Force
    
        .EXAMPLE
            The following downloads all the items from the media library in the specified path.
    
            $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
            Invoke-RemoteScript -Session $session -ScriptBlock { 
                Get-ChildItem -Path "master:/sitecore/media library/Images/Icons/" | Select-Object -Expand ItemPath 
            } | Receive-MediaItem -Session $session -Destination C:\Temp\Images\
    #>
    [CmdletBinding()]
    param(
        [Parameter(ParameterSetName='Session')]
        [ValidateNotNull()]
        [pscustomobject[]]$Session,

        [Parameter(ParameterSetName='Uri')]
        [string]$ConnectionUri,

        [Parameter(ParameterSetName='Uri')]
        [string]$SessionId,

        [Parameter(ParameterSetName='Uri')]
        [string]$Username,

        [Parameter(ParameterSetName='Uri')]
        [string]$Password,

        [Parameter(ParameterSetName='Uri')]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Path,
        
        [Parameter(Position=1, Mandatory=$true)]
        [Alias("RemotePath")]
		[ValidateNotNullOrEmpty()]
        [string]$Destination,

        [Parameter(Position=2)]
        [string]$Database = "master",

        [Parameter(Position=3)]
        [string]$Language = "en",

        [Parameter()]
        [switch]$Force
    )
    
    begin {
        function Get-ImageExtension {
            param(
                [ValidateNotNullOrEmpty()]
                [byte[]]$ImageData
            )
        
            $extension = ".jpg"
        
            Write-Verbose "The destination path is missing a file extension. Attempting to figure that out now."
            $memoryStream = New-Object System.IO.MemoryStream
            $memoryStream.Write($ImageData, 0, $ImageData.Length)
            $image = [System.Drawing.Image]::FromStream($memoryStream)
            switch($image.RawFormat.Guid) {
                "b96b3cab-0728-11d3-9d7b-0000f81ef32e" {
                    $extension = ".bmp"
                    break
                }
                "b96b3cb0-0728-11d3-9d7b-0000f81ef32e" {
                    $extension = ".gif"
                    break
                }
                "b96b3cae-0728-11d3-9d7b-0000f81ef32e" {
                    $extension = ".jpg"
                    break
                }
                "b96b3caa-0728-11d3-9d7b-0000f81ef32e" {
                    $extension = ".bmp"
                    break
                }
                "b96b3caf-0728-11d3-9d7b-0000f81ef32e" {
                    $extension = ".png"
                    break
                }
            }
            $memoryStream.Dispose()
            $image.Dispose()
        
            $extension
        }
    }

    process {

        foreach($s in $Session) {

            if($PSCmdlet.ParameterSetName -eq "Session") {
                $ConnectionUri = $s.ConnectionUri
                $Username = $s.Username
                $Password = $s.Password
                $SessionId = $s.SessionId
                $Proxy = $s.Proxy
            }

            Write-Verbose -Message "Connecting to web service."
            
            if(!$ConnectionUri.EndsWith(".asmx")) {
                $ConnectionUri = "$($ConnectionUri.TrimEnd('/'))/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx"
            }

            if(!$Proxy) {
                $proxyProps = @{
                    Uri = $ConnectionUri
                }

                if($Credential) {
                    $proxyProps["Credential"] = $Credential
                }

                $proxy = New-WebServiceProxy @proxyProps
                if($Credential) {
                    $proxy.Credentials = $Credential
                }
            }
            if(-not $proxy) { return $null }

            Write-Verbose -Message "Downloading file content."
            [byte[]]$response = $proxy.DownloadFile($Username, $Password, $Path, $Database, $Language)
	
            if($response -and $response.Length -gt 0) {
                
                $directory = [System.IO.Path]::GetDirectoryName($Destination)

                if(!(Test-Path $directory -PathType Container)) {
                    Write-Verbose "Creating a new directory $($directory)"
                    New-Item -ItemType Directory -Path $directory | Out-Null
                }

                $output = $Destination

                $extension = [System.IO.Path]::GetExtension($output)
                if(!$extension) {
                    $extension = Get-ImageExtension -ImageData $response

                    $name = [System.IO.Path]::GetFileName($Path.TrimEnd('\','/'))
                    $output = Join-Path -Path $output -ChildPath ($name + $extension)
                }
                
                if(-not(Test-Path $output -PathType Leaf) -or $Force.IsPresent) {
                    Write-Verbose "Creating a new file $($output)"
                    New-Item -Path $output -ItemType File -Force | Out-Null
                    [System.IO.File]::WriteAllBytes((Convert-Path -Path $output), $response)
                } else {
                    Write-Verbose "Skipping the save of $($output) because it already exists."
                }
            } else {
                Write-Verbose -Message "Download failed. No content returned from the web service."
            }
        }
    }
}
----version----
language: en
version: 1
revision: 0bbb61b5-a4c2-4039-b4f3-6ca8bee574ea

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 16

20150713T165257Z
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

0bbb61b5-a4c2-4039-b4f3-6ca8bee574ea
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 35

20150713T170916:635724041563348931Z
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
