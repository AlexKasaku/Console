----item----
version: 1
id: {0CAE5C5B-C760-4D9C-952B-88D3A90DB5F9}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Platform/Functions/Receive-MediaItem
parent: {E22D066A-04D0-4799-9DAD-EDD9EB07C2B2}
name: Receive-MediaItem
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 6410

<#
    .SYNOPSIS
        Downloads an item from the media library in Sitecore PowerShell Extensions via web service calls.

   .EXAMPLE
        The following downloads an item from the media library in the master db and dynamically detects the file extension.
        Existing files will be deleted automatically.

        $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
        Receive-MediaItem -Session $session -Path "/sitecore/media library/Images/Icons/accuracy" -Destination C:\Images\ -Force

   .EXAMPLE
        The following downloads an item from the media library in the master db and uses the specified name.

        $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
        Receive-MediaItem -Session $session -Path "/sitecore/media library/Images/Icons/accuracy" -Destination C:\Images\accuracy2.jpg -Force

    .EXAMPLE
        The following downloads all the items from the media library in the specified path.

        $session = New-ScriptSession -Username admin -Password b -ConnectionUri http://remotesitecore
        Invoke-RemoteScript -Session $session -ScriptBlock { 
            Get-ChildItem -Path "master:/sitecore/media library/Images/Icons/" | Select-Object -Expand ItemPath 
        } | Receive-MediaItem -Session $session -Destination C:\Temp\Images\
#>

function Get-ImageExtension {
    param(
        [ValidateNotNullOrEmpty()]
        [byte[]]$ImageData
    )

    $extension = ".jpg"

    Write-Verbose "The destination path is missing a file extension. Attempting to figure that out now."
    $memoryStream = New-Object System.IO.MemoryStream
    $memoryStream.Write($ImageData, 0, $ImageData.Length)
    $image = [System.Drawing.Image]::FromStream($memoryStream)
    switch($image.RawFormat.Guid) {
        "b96b3cab-0728-11d3-9d7b-0000f81ef32e" {
            $extension = ".bmp"
            break
        }
        "b96b3cb0-0728-11d3-9d7b-0000f81ef32e" {
            $extension = ".gif"
            break
        }
        "b96b3cae-0728-11d3-9d7b-0000f81ef32e" {
            $extension = ".jpg"
            break
        }
        "b96b3caa-0728-11d3-9d7b-0000f81ef32e" {
            $extension = ".bmp"
            break
        }
        "b96b3caf-0728-11d3-9d7b-0000f81ef32e" {
            $extension = ".png"
            break
        }
    }
    $memoryStream.Dispose()
    $image.Dispose()

    $extension
}

function Receive-MediaItem {
    [CmdletBinding()]
    param(
        [Parameter(ParameterSetName='Session')]
        [ValidateNotNull()]
        [pscustomobject[]]$Session,

        [Parameter(ParameterSetName='Uri')]
        [string]$ConnectionUri,

        [Parameter(ParameterSetName='Uri')]
        [string]$SessionId,

        [Parameter(ParameterSetName='Uri')]
        [string]$Username,

        [Parameter(ParameterSetName='Uri')]
        [string]$Password,

        [Parameter(ParameterSetName='Uri')]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Path,
        
        [Parameter(Position=1, Mandatory=$true)]
        [Alias("RemotePath")]
		[ValidateNotNullOrEmpty()]
        [string]$Destination,

        [Parameter(Position=2)]
        [string]$Database = "master",

        [Parameter(Position=3)]
        [string]$Language = "en",

        [Parameter()]
        [switch]$Force
    )

    process {

        foreach($s in $Session) {

            if($PSCmdlet.ParameterSetName -eq "Session") {
                $ConnectionUri = $s.ConnectionUri
                $Username = $s.Username
                $Password = $s.Password
                $SessionId = $s.SessionId
                $Proxy = $s.Proxy
            }

            Write-Verbose -Message "Connecting to web service."
            
            if(!$ConnectionUri.EndsWith(".asmx")) {
                $ConnectionUri = "$($ConnectionUri.TrimEnd('/'))/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx"
            }

            if(!$Proxy) {
                $proxyProps = @{
                    Uri = $ConnectionUri
                }

                if($Credential) {
                    $proxyProps["Credential"] = $Credential
                }

                $proxy = New-WebServiceProxy @proxyProps
                if($Credential) {
                    $proxy.Credentials = $Credential
                }
            }
            if(-not $proxy) { return $null }

            Write-Verbose -Message "Downloading file content."
            [byte[]]$response = $proxy.DownloadFile($Username, $Password, $Path, $Database, $Language)
	
            if($response -and $response.Length -gt 0) {
                
                $directory = [System.IO.Path]::GetDirectoryName($Destination)

                if(!(Test-Path $directory -PathType Container)) {
                    Write-Verbose "Creating a new directory $($directory)"
                    New-Item -ItemType Directory -Path $directory | Out-Null
                }

                $output = $Destination

                $extension = [System.IO.Path]::GetExtension($output)
                if(!$extension) {
                    $extension = Get-ImageExtension -ImageData $response

                    $name = [System.IO.Path]::GetFileName($Path.TrimEnd('\','/'))
                    $output = Join-Path -Path $output -ChildPath ($name + $extension)
                }
                
                if(-not(Test-Path $output -PathType Leaf) -or $Force.IsPresent) {
                    Write-Verbose "Creating a new file $($output)"
                    New-Item -Path $output -ItemType File -Force | Out-Null
                    [System.IO.File]::WriteAllBytes((Convert-Path -Path $output), $response)
                } else {
                    Write-Verbose "Skipping the save of $($output) because it already exists."
                }
            } else {
                Write-Verbose -Message "Download failed. No content returned from the web service."
            }
        }
    }
}

Set-Alias -Name "Download-SitecoreFile" -Value "Receive-MediaItem" -Description "SPE"
----version----
language: en
version: 1
revision: ebf71bb5-4866-4a11-a664-89579c79413d

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20150427T211724
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

ebf71bb5-4866-4a11-a664-89579c79413d
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 34

20150701T194242:635713765624564456
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
